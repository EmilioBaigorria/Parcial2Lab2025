// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// CREACION DE LA BDD

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// CREACION DE ENTIDADES Y ENUMS

// Entidades

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[] @relation("ProductoCategorias")
  estadoM   ModelState @default(ACTIVO)
}

model Descuento {
  id           Int        @id @default(autoincrement())
  fechaInicio  DateTime
  fechaCierre  DateTime
  descuento    Float
  productos    Producto[]
  estadoM      ModelState @default(ACTIVO)
}

model DetalleOrden {
  id             Int          @id @default(autoincrement())
  cantidad       Int
  precioUnitario Float
  producto       Producto     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId     Int
  ordenCompra    OrdenCompra? @relation(fields: [ordenCompraId], references: [id], onDelete: Cascade)
  ordenCompraId  Int?
  estadoM        ModelState   @default(ACTIVO)
}

model Direccion {
  id        Int        @id @default(autoincrement())
  calle     String
  codpost   Int
  usuarios  Usuario[]  @relation("UsuarioDirecciones")
  estadoM   ModelState @default(ACTIVO)
}

model OrdenCompra {
  id           Int            @id @default(autoincrement())
  fechaOrden   DateTime       @default(now())
  montototal   Float
  mediopago    String
  detalles     DetalleOrden[]
  pedido       Pedido?        @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId     Int?           @unique
  estadoM      ModelState     @default(ACTIVO)
}

model Pedido {
  id             Int           @id @default(autoincrement())
  estado         Estado        @default(PENDIENTE)
  fechacreacion  DateTime
  items          PedidoItem[]
  usuario        Usuario       @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId      Int
  ordenCompra    OrdenCompra?
  estadoM        ModelState    @default(ACTIVO)
}

model PedidoItem {
  id          Int         @id @default(autoincrement())
  cantidad    Int
  producto    Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int
  pedido      Pedido?     @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId    Int?
  estadoM     ModelState  @default(ACTIVO)
}

model Producto {
  id           Int            @id @default(autoincrement())
  nombre       String
  descripcion  String
  precio       Float
  stock        Int
  categorias   Categoria[]    @relation("ProductoCategorias")
  color        String
  marca        String
  imagen       String
  descuento    Descuento      @relation(fields: [descuentoId], references: [id], onDelete: Cascade)
  descuentoId  Int
  pedidoItems  PedidoItem[]
  detalleOrden DetalleOrden[] 
  talles       Talle[]        @relation("ProductoTalles")
  estadoM      ModelState     @default(ACTIVO)
}


model Talle {
  id         Int         @id @default(autoincrement())
  talle      String      @unique
  productos  Producto[]  @relation("ProductoTalles")
  estadoM    ModelState  @default(ACTIVO)
}

model Usuario {
  id           Int         @id @default(autoincrement())
  nombre       String
  apellido     String
  email        String      @unique
  password     String
  rol          Rol         @default(USER)
  direcciones  Direccion[] @relation("UsuarioDirecciones")
  pedidos      Pedido[]
  estadoM      ModelState  @default(ACTIVO)
}

// Enums

enum Rol {
  ADMIN
  USER
}

enum ModelState {
  ACTIVO
  INACTIVO
}

enum Estado {
  PENDIENTE
  ENPROCESO
  APROBADO
  RECHAZADO
  CANCELADO
  FALLIDO
}
